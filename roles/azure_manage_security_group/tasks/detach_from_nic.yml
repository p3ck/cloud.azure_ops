---
- name: Get nic resource
  azure.azcollection.azure_rm_resource_info:
    url: "{{ azure_manage_security_group_nic_id['id'] }}"
  register: azure_manage_security_group_nic_obj

- name: Get nic info
  azure.azcollection.azure_rm_networkinterface_info:
    resource_group: "{{ azure_manage_security_group_resource_group }}"
    name: "{{ azure_manage_security_group_nic_obj.response[0].name }}"
  register: azure_manage_security_group_nic_result

- name: Init nic
  ansible.builtin.set_fact:
    azure_manage_security_group_nic: "{{ azure_manage_security_group_nic_result.networkinterfaces[0] }}"

- name: Remove unsupported params from dictionary
  ansible.builtin.set_fact:
    azure_manage_security_group_nic: "{{ azure_manage_security_group_nic | dict2items | rejectattr('key', 'search', item) | list | items2dict }}"
  loop:
    - security_group
    - dns_settings
    - id
    - mac_address
    - provisioning_state

### Only works for 1 ip configuration. If we want to keep this we can just loop ip configs, but didnt want to spend too much time here.
- name: Init ipconf
  ansible.builtin.set_fact:
    azure_manage_security_group_ipconf: "{{ azure_manage_security_group_nic['ip_configurations'][0] }}"

- name: Remove null params from ip configs dict
  ansible.builtin.set_fact:
    azure_manage_security_group_ipconf: "{{ azure_manage_security_group_ipconf | dict2items | rejectattr('key', 'search', item.key) | list | items2dict }}"
  with_dict: "{{ azure_manage_security_group_ipconf }}"
  when: item.value is none

- name: Replace incorrect public ip param (pip resource id) to correct one (pip name) if nic has a public ip
  ansible.builtin.set_fact:
    azure_manage_security_group_ipconf: "{{ azure_manage_security_group_ipconf | dict2items | rejectattr('key', 'search', 'public_ip_address') | list | items2dict | combine({'public_ip_address_name': azure_manage_security_group_ipconf['public_ip_address']\
      \ | regex_search('[^/]+$')}) }}"
  when: "'public_ip_address' is in azure_manage_security_group_ipconf"

- name: Replace old ip config with new and ensure default security group is disabled
  ansible.builtin.set_fact:
    azure_manage_security_group_nic: "{{ azure_manage_security_group_nic | dict2items | rejectattr('key', 'search', 'ip_configurations') | list | items2dict | combine({'ip_configurations': [azure_manage_security_group_ipconf]}) | combine({'create_with_security_group':\
      \ false}) }}"

- name: Update nic to detach from security group
  azure.azcollection.azure_rm_networkinterface: "{{ azure_manage_security_group_nic }}"
